//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest.h"
#include "ComGoogleGsonGson.h"
#include "ComGoogleGsonGsonBuilder.h"
#include "ComGoogleGsonLongSerializationPolicy.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicIntegerArray.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "java/util/concurrent/atomic/AtomicLongArray.h"
#include "junit/framework/TestCase.h"

@interface ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest () {
 @public
  ComGoogleGsonGson *gson_;
}

@end

J2OBJC_FIELD_SETTER(ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest, gson_, ComGoogleGsonGson *)

@interface ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest_AtomicLongHolder : NSObject {
 @public
  JavaUtilConcurrentAtomicAtomicLong *value_;
}

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest_AtomicLongHolder)

J2OBJC_FIELD_SETTER(ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest_AtomicLongHolder, value_, JavaUtilConcurrentAtomicAtomicLong *)

__attribute__((unused)) static void ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest_AtomicLongHolder_init(ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest_AtomicLongHolder *self);

__attribute__((unused)) static ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest_AtomicLongHolder *new_ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest_AtomicLongHolder_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest_AtomicLongHolder *create_ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest_AtomicLongHolder_init();

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest_AtomicLongHolder)

@implementation ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setUp {
  [super setUp];
  JreStrongAssignAndConsume(&gson_, new_ComGoogleGsonGson_init());
}

- (void)testAtomicBoolean {
  JavaUtilConcurrentAtomicAtomicBoolean *target = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"true" withIOSClass:JavaUtilConcurrentAtomicAtomicBoolean_class_()];
  JunitFrameworkTestCase_assertTrueWithBoolean_([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(target)) get]);
  NSString *json = [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:target];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"true", json);
}

- (void)testAtomicInteger {
  JavaUtilConcurrentAtomicAtomicInteger *target = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"10" withIOSClass:JavaUtilConcurrentAtomicAtomicInteger_class_()];
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(10, [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(target)) get]);
  NSString *json = [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:target];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"10", json);
}

- (void)testAtomicLong {
  JavaUtilConcurrentAtomicAtomicLong *target = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"10" withIOSClass:JavaUtilConcurrentAtomicAtomicLong_class_()];
  JunitFrameworkTestCase_assertEqualsWithLong_withLong_(10, [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(target)) get]);
  NSString *json = [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:target];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"10", json);
}

- (void)testAtomicLongWithStringSerializationPolicy {
  ComGoogleGsonGson *gson = [((ComGoogleGsonGsonBuilder *) nil_chk([create_ComGoogleGsonGsonBuilder_init() setLongSerializationPolicyWithComGoogleGsonLongSerializationPolicy:JreLoadEnum(ComGoogleGsonLongSerializationPolicy, STRING)])) create];
  ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest_AtomicLongHolder *target = [((ComGoogleGsonGson *) nil_chk(gson)) fromJsonWithNSString:@"{'value':'10'}" withIOSClass:ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest_AtomicLongHolder_class_()];
  JunitFrameworkTestCase_assertEqualsWithLong_withLong_(10, [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(((ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest_AtomicLongHolder *) nil_chk(target))->value_)) get]);
  NSString *json = [gson toJsonWithId:target];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"{\"value\":\"10\"}", json);
}

- (void)testAtomicIntegerArray {
  JavaUtilConcurrentAtomicAtomicIntegerArray *target = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"[10, 13, 14]" withIOSClass:JavaUtilConcurrentAtomicAtomicIntegerArray_class_()];
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(3, [((JavaUtilConcurrentAtomicAtomicIntegerArray *) nil_chk(target)) length]);
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(10, [target getWithInt:0]);
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(13, [target getWithInt:1]);
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(14, [target getWithInt:2]);
  NSString *json = [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:target];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"[10,13,14]", json);
}

- (void)testAtomicLongArray {
  JavaUtilConcurrentAtomicAtomicLongArray *target = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"[10, 13, 14]" withIOSClass:JavaUtilConcurrentAtomicAtomicLongArray_class_()];
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(3, [((JavaUtilConcurrentAtomicAtomicLongArray *) nil_chk(target)) length]);
  JunitFrameworkTestCase_assertEqualsWithLong_withLong_(10, [target getWithInt:0]);
  JunitFrameworkTestCase_assertEqualsWithLong_withLong_(13, [target getWithInt:1]);
  JunitFrameworkTestCase_assertEqualsWithLong_withLong_(14, [target getWithInt:2]);
  NSString *json = [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:target];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"[10,13,14]", json);
}

- (void)testAtomicLongArrayWithStringSerializationPolicy {
  ComGoogleGsonGson *gson = [((ComGoogleGsonGsonBuilder *) nil_chk([create_ComGoogleGsonGsonBuilder_init() setLongSerializationPolicyWithComGoogleGsonLongSerializationPolicy:JreLoadEnum(ComGoogleGsonLongSerializationPolicy, STRING)])) create];
  JavaUtilConcurrentAtomicAtomicLongArray *target = [((ComGoogleGsonGson *) nil_chk(gson)) fromJsonWithNSString:@"['10', '13', '14']" withIOSClass:JavaUtilConcurrentAtomicAtomicLongArray_class_()];
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(3, [((JavaUtilConcurrentAtomicAtomicLongArray *) nil_chk(target)) length]);
  JunitFrameworkTestCase_assertEqualsWithLong_withLong_(10, [target getWithInt:0]);
  JunitFrameworkTestCase_assertEqualsWithLong_withLong_(13, [target getWithInt:1]);
  JunitFrameworkTestCase_assertEqualsWithLong_withLong_(14, [target getWithInt:2]);
  NSString *json = [gson toJsonWithId:target];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"[\"10\",\"13\",\"14\"]", json);
}

- (void)dealloc {
  RELEASE_(gson_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setUp);
  methods[2].selector = @selector(testAtomicBoolean);
  methods[3].selector = @selector(testAtomicInteger);
  methods[4].selector = @selector(testAtomicLong);
  methods[5].selector = @selector(testAtomicLongWithStringSerializationPolicy);
  methods[6].selector = @selector(testAtomicIntegerArray);
  methods[7].selector = @selector(testAtomicLongArray);
  methods[8].selector = @selector(testAtomicLongArrayWithStringSerializationPolicy);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "gson_", "LComGoogleGsonGson;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;", "LComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest_AtomicLongHolder;" };
  static const J2ObjcClassInfo _ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest = { "JavaUtilConcurrentAtomicTest", "com.google.gson.functional", ptrTable, methods, fields, 7, 0x1, 9, 1, -1, 1, -1, -1, -1 };
  return &_ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest;
}

@end

void ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest_init(ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest *self) {
  JunitFrameworkTestCase_init(self);
}

ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest *new_ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest_init() {
  J2OBJC_NEW_IMPL(ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest, init)
}

ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest *create_ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest_init() {
  J2OBJC_CREATE_IMPL(ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest)

@implementation ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest_AtomicLongHolder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest_AtomicLongHolder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(value_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "value_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest;" };
  static const J2ObjcClassInfo _ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest_AtomicLongHolder = { "AtomicLongHolder", "com.google.gson.functional", ptrTable, methods, fields, 7, 0xa, 1, 1, 0, -1, -1, -1, -1 };
  return &_ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest_AtomicLongHolder;
}

@end

void ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest_AtomicLongHolder_init(ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest_AtomicLongHolder *self) {
  NSObject_init(self);
}

ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest_AtomicLongHolder *new_ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest_AtomicLongHolder_init() {
  J2OBJC_NEW_IMPL(ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest_AtomicLongHolder, init)
}

ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest_AtomicLongHolder *create_ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest_AtomicLongHolder_init() {
  J2OBJC_CREATE_IMPL(ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest_AtomicLongHolder, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest_AtomicLongHolder)
