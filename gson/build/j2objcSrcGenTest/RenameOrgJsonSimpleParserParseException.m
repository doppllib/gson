//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "RenameOrgJsonSimpleParserParseException.h"
#include "java/lang/Exception.h"
#include "java/lang/StringBuffer.h"

@interface RenameOrgJsonSimpleParserParseException () {
 @public
  jint errorType_;
  id unexpectedObject_;
  jint position_;
}

@end

J2OBJC_FIELD_SETTER(RenameOrgJsonSimpleParserParseException, unexpectedObject_, id)

inline jlong RenameOrgJsonSimpleParserParseException_get_serialVersionUID();
#define RenameOrgJsonSimpleParserParseException_serialVersionUID -7880698968187728547LL
J2OBJC_STATIC_FIELD_CONSTANT(RenameOrgJsonSimpleParserParseException, serialVersionUID, jlong)

@implementation RenameOrgJsonSimpleParserParseException

- (instancetype)initWithInt:(jint)errorType {
  RenameOrgJsonSimpleParserParseException_initWithInt_(self, errorType);
  return self;
}

- (instancetype)initWithInt:(jint)errorType
                     withId:(id)unexpectedObject {
  RenameOrgJsonSimpleParserParseException_initWithInt_withId_(self, errorType, unexpectedObject);
  return self;
}

- (instancetype)initWithInt:(jint)position
                    withInt:(jint)errorType
                     withId:(id)unexpectedObject {
  RenameOrgJsonSimpleParserParseException_initWithInt_withInt_withId_(self, position, errorType, unexpectedObject);
  return self;
}

- (jint)getErrorType {
  return errorType_;
}

- (void)setErrorTypeWithInt:(jint)errorType {
  self->errorType_ = errorType;
}

- (jint)getPosition {
  return position_;
}

- (void)setPositionWithInt:(jint)position {
  self->position_ = position;
}

- (id)getUnexpectedObject {
  return unexpectedObject_;
}

- (void)setUnexpectedObjectWithId:(id)unexpectedObject {
  JreStrongAssign(&self->unexpectedObject_, unexpectedObject);
}

- (NSString *)getMessage {
  JavaLangStringBuffer *sb = create_JavaLangStringBuffer_init();
  switch (errorType_) {
    case RenameOrgJsonSimpleParserParseException_ERROR_UNEXPECTED_CHAR:
    [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([sb appendWithNSString:@"Unexpected character ("])) appendWithId:unexpectedObject_])) appendWithNSString:@") at position "])) appendWithInt:position_])) appendWithNSString:@"."];
    break;
    case RenameOrgJsonSimpleParserParseException_ERROR_UNEXPECTED_TOKEN:
    [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([sb appendWithNSString:@"Unexpected token "])) appendWithId:unexpectedObject_])) appendWithNSString:@" at position "])) appendWithInt:position_])) appendWithNSString:@"."];
    break;
    case RenameOrgJsonSimpleParserParseException_ERROR_UNEXPECTED_EXCEPTION:
    [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([sb appendWithNSString:@"Unexpected exception at position "])) appendWithInt:position_])) appendWithNSString:@": "])) appendWithId:unexpectedObject_];
    break;
    default:
    [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([sb appendWithNSString:@"Unkown error at position "])) appendWithInt:position_])) appendWithNSString:@"."];
    break;
  }
  return [sb description];
}

- (void)dealloc {
  RELEASE_(unexpectedObject_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(initWithInt:withId:);
  methods[2].selector = @selector(initWithInt:withInt:withId:);
  methods[3].selector = @selector(getErrorType);
  methods[4].selector = @selector(setErrorTypeWithInt:);
  methods[5].selector = @selector(getPosition);
  methods[6].selector = @selector(setPositionWithInt:);
  methods[7].selector = @selector(getUnexpectedObject);
  methods[8].selector = @selector(setUnexpectedObjectWithId:);
  methods[9].selector = @selector(getMessage);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = RenameOrgJsonSimpleParserParseException_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "ERROR_UNEXPECTED_CHAR", "I", .constantValue.asInt = RenameOrgJsonSimpleParserParseException_ERROR_UNEXPECTED_CHAR, 0x19, -1, -1, -1, -1 },
    { "ERROR_UNEXPECTED_TOKEN", "I", .constantValue.asInt = RenameOrgJsonSimpleParserParseException_ERROR_UNEXPECTED_TOKEN, 0x19, -1, -1, -1, -1 },
    { "ERROR_UNEXPECTED_EXCEPTION", "I", .constantValue.asInt = RenameOrgJsonSimpleParserParseException_ERROR_UNEXPECTED_EXCEPTION, 0x19, -1, -1, -1, -1 },
    { "errorType_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "unexpectedObject_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "position_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "ILNSObject;", "IILNSObject;", "setErrorType", "setPosition", "setUnexpectedObject", "LNSObject;" };
  static const J2ObjcClassInfo _RenameOrgJsonSimpleParserParseException = { "ParseException", "rename.org.json.simple.parser", ptrTable, methods, fields, 7, 0x1, 10, 7, -1, -1, -1, -1, -1 };
  return &_RenameOrgJsonSimpleParserParseException;
}

@end

void RenameOrgJsonSimpleParserParseException_initWithInt_(RenameOrgJsonSimpleParserParseException *self, jint errorType) {
  RenameOrgJsonSimpleParserParseException_initWithInt_withInt_withId_(self, -1, errorType, nil);
}

RenameOrgJsonSimpleParserParseException *new_RenameOrgJsonSimpleParserParseException_initWithInt_(jint errorType) {
  J2OBJC_NEW_IMPL(RenameOrgJsonSimpleParserParseException, initWithInt_, errorType)
}

RenameOrgJsonSimpleParserParseException *create_RenameOrgJsonSimpleParserParseException_initWithInt_(jint errorType) {
  J2OBJC_CREATE_IMPL(RenameOrgJsonSimpleParserParseException, initWithInt_, errorType)
}

void RenameOrgJsonSimpleParserParseException_initWithInt_withId_(RenameOrgJsonSimpleParserParseException *self, jint errorType, id unexpectedObject) {
  RenameOrgJsonSimpleParserParseException_initWithInt_withInt_withId_(self, -1, errorType, unexpectedObject);
}

RenameOrgJsonSimpleParserParseException *new_RenameOrgJsonSimpleParserParseException_initWithInt_withId_(jint errorType, id unexpectedObject) {
  J2OBJC_NEW_IMPL(RenameOrgJsonSimpleParserParseException, initWithInt_withId_, errorType, unexpectedObject)
}

RenameOrgJsonSimpleParserParseException *create_RenameOrgJsonSimpleParserParseException_initWithInt_withId_(jint errorType, id unexpectedObject) {
  J2OBJC_CREATE_IMPL(RenameOrgJsonSimpleParserParseException, initWithInt_withId_, errorType, unexpectedObject)
}

void RenameOrgJsonSimpleParserParseException_initWithInt_withInt_withId_(RenameOrgJsonSimpleParserParseException *self, jint position, jint errorType, id unexpectedObject) {
  JavaLangException_init(self);
  self->position_ = position;
  self->errorType_ = errorType;
  JreStrongAssign(&self->unexpectedObject_, unexpectedObject);
}

RenameOrgJsonSimpleParserParseException *new_RenameOrgJsonSimpleParserParseException_initWithInt_withInt_withId_(jint position, jint errorType, id unexpectedObject) {
  J2OBJC_NEW_IMPL(RenameOrgJsonSimpleParserParseException, initWithInt_withInt_withId_, position, errorType, unexpectedObject)
}

RenameOrgJsonSimpleParserParseException *create_RenameOrgJsonSimpleParserParseException_initWithInt_withInt_withId_(jint position, jint errorType, id unexpectedObject) {
  J2OBJC_CREATE_IMPL(RenameOrgJsonSimpleParserParseException, initWithInt_withInt_withId_, position, errorType, unexpectedObject)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RenameOrgJsonSimpleParserParseException)
