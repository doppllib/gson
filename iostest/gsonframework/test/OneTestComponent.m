//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "CoTouchlabDopplTestingDopplJunitTestHelper.h"
#include "ComGoogleGsonCommentsTest.h"
#include "ComGoogleGsonDefaultDateTypeAdapterTest.h"
#include "ComGoogleGsonDefaultInetAddressTypeAdapterTest.h"
#include "ComGoogleGsonDefaultMapJsonSerializerTest.h"
#include "ComGoogleGsonDopplJ2objcMemoryPlaygroundTest.h"
#include "ComGoogleGsonExposeAnnotationExclusionStrategyTest.h"
#include "ComGoogleGsonFieldAttributesTest.h"
#include "ComGoogleGsonFunctionalArrayTest.h"
#include "ComGoogleGsonFunctionalCircularReferenceTest.h"
#include "ComGoogleGsonFunctionalCollectionTest.h"
#include "ComGoogleGsonFunctionalConcurrencyTest.h"
#include "ComGoogleGsonFunctionalCustomDeserializerTest.h"
#include "ComGoogleGsonFunctionalCustomSerializerTest.h"
#include "ComGoogleGsonFunctionalCustomTypeAdaptersTest.h"
#include "ComGoogleGsonFunctionalDefaultTypeAdaptersTest.h"
#include "ComGoogleGsonFunctionalDelegateTypeAdapterTest.h"
#include "ComGoogleGsonFunctionalEnumTest.h"
#include "ComGoogleGsonFunctionalEscapingTest.h"
#include "ComGoogleGsonFunctionalExclusionStrategyFunctionalTest.h"
#include "ComGoogleGsonFunctionalExposeFieldsTest.h"
#include "ComGoogleGsonFunctionalFieldExclusionTest.h"
#include "ComGoogleGsonFunctionalFieldNamingTest.h"
#include "ComGoogleGsonFunctionalInheritanceTest.h"
#include "ComGoogleGsonFunctionalInstanceCreatorTest.h"
#include "ComGoogleGsonFunctionalInterfaceTest.h"
#include "ComGoogleGsonFunctionalInternationalizationTest.h"
#include "ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest.h"
#include "ComGoogleGsonFunctionalJavaUtilTest.h"
#include "ComGoogleGsonFunctionalJsonAdapterAnnotationOnClassesTest.h"
#include "ComGoogleGsonFunctionalJsonAdapterAnnotationOnFieldsTest.h"
#include "ComGoogleGsonFunctionalJsonFunctionalArrayTest.h"
#include "ComGoogleGsonFunctionalJsonFunctionalParserTest.h"
#include "ComGoogleGsonFunctionalJsonTreeTest.h"
#include "ComGoogleGsonFunctionalLeniencyTest.h"
#include "ComGoogleGsonFunctionalMapAsArrayTypeAdapterTest.h"
#include "ComGoogleGsonFunctionalMapTest.h"
#include "ComGoogleGsonFunctionalMoreSpecificTypeSerializationTest.h"
#include "ComGoogleGsonFunctionalNamingPolicyTest.h"
#include "ComGoogleGsonFunctionalNullObjectAndFieldTest.h"
#include "ComGoogleGsonFunctionalObjectTest.h"
#include "ComGoogleGsonFunctionalParameterizedTypesTest.h"
#include "ComGoogleGsonFunctionalPrettyPrintingTest.h"
#include "ComGoogleGsonFunctionalPrimitiveCharacterTest.h"
#include "ComGoogleGsonFunctionalPrimitiveTest.h"
#include "ComGoogleGsonFunctionalPrintFormattingTest.h"
#include "ComGoogleGsonFunctionalRawSerializationTest.h"
#include "ComGoogleGsonFunctionalReadersWritersTest.h"
#include "ComGoogleGsonFunctionalRuntimeTypeAdapterFactoryFunctionalTest.h"
#include "ComGoogleGsonFunctionalSecurityTest.h"
#include "ComGoogleGsonFunctionalSerializedNameTest.h"
#include "ComGoogleGsonFunctionalStreamingTypeAdaptersTest.h"
#include "ComGoogleGsonFunctionalStringTest.h"
#include "ComGoogleGsonFunctionalThrowableFunctionalTest.h"
#include "ComGoogleGsonFunctionalTreeTypeAdaptersTest.h"
#include "ComGoogleGsonFunctionalTypeAdapterPrecedenceTest.h"
#include "ComGoogleGsonFunctionalTypeHierarchyAdapterTest.h"
#include "ComGoogleGsonFunctionalTypeVariableTest.h"
#include "ComGoogleGsonFunctionalUncategorizedTest.h"
#include "ComGoogleGsonFunctionalVersioningTest.h"
#include "ComGoogleGsonGenericArrayTypeTest.h"
#include "ComGoogleGsonGsonBuilderTest.h"
#include "ComGoogleGsonGsonTypeAdapterTest.h"
#include "ComGoogleGsonInnerClassExclusionStrategyTest.h"
#include "ComGoogleGsonInternalBindJsonElementReaderTest.h"
#include "ComGoogleGsonInternalBindJsonTreeWriterTest.h"
#include "ComGoogleGsonInternalGsonTypesTest.h"
#include "ComGoogleGsonInternalLazilyParsedNumberTest.h"
#include "ComGoogleGsonInternalLinkedHashTreeMapTest.h"
#include "ComGoogleGsonInternalLinkedTreeMapTest.h"
#include "ComGoogleGsonInternalUnsafeAllocatorInstantiationTest.h"
#include "ComGoogleGsonJavaSerializationTest.h"
#include "ComGoogleGsonJsonArrayTest.h"
#include "ComGoogleGsonJsonNullTest.h"
#include "ComGoogleGsonJsonObjectTest.h"
#include "ComGoogleGsonJsonParserTest.h"
#include "ComGoogleGsonJsonPrimitiveTest.h"
#include "ComGoogleGsonJsonStreamParserTest.h"
#include "ComGoogleGsonLongSerializationPolicyTest.h"
#include "ComGoogleGsonMetricsPerformanceTest.h"
#include "ComGoogleGsonMixedStreamTest.h"
#include "ComGoogleGsonObjectTypeAdapterTest.h"
#include "ComGoogleGsonOverrideCoreTypeAdaptersTest.h"
#include "ComGoogleGsonParameterizedTypeTest.h"
#include "ComGoogleGsonReflectTypeTokenTest.h"
#include "ComGoogleGsonRegressionJsonAdapterNullSafeTest.h"
#include "ComGoogleGsonStreamJsonReaderPathTest.h"
#include "ComGoogleGsonStreamJsonReaderTest.h"
#include "ComGoogleGsonStreamJsonWriterTest.h"
#include "ComGoogleGsonVersionExclusionStrategyTest.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OneTestComponent.h"
#include "org/junit/runner/notification/RunListener.h"

inline IOSObjectArray *OneTestComponent_get_oneclass();
inline IOSObjectArray *OneTestComponent_set_oneclass(IOSObjectArray *value);
static IOSObjectArray *OneTestComponent_oneclass;
J2OBJC_STATIC_FIELD_OBJ(OneTestComponent, oneclass, IOSObjectArray *)

inline IOSObjectArray *OneTestComponent_get_classes();
inline IOSObjectArray *OneTestComponent_set_classes(IOSObjectArray *value);
static IOSObjectArray *OneTestComponent_classes;
J2OBJC_STATIC_FIELD_OBJ(OneTestComponent, classes, IOSObjectArray *)

@interface OneTestComponent_1 : NSObject < CoTouchlabDopplTestingDopplJunitTestHelper_DopplJunitListener >

- (instancetype)init;

- (void)startRunWithNSString:(NSString *)s;

- (void)endRunWithNSString:(NSString *)s;

@end

J2OBJC_EMPTY_STATIC_INIT(OneTestComponent_1)

__attribute__((unused)) static void OneTestComponent_1_init(OneTestComponent_1 *self);

__attribute__((unused)) static OneTestComponent_1 *new_OneTestComponent_1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OneTestComponent_1 *create_OneTestComponent_1_init();

J2OBJC_INITIALIZED_DEFN(OneTestComponent)

@implementation OneTestComponent

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OneTestComponent_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jint)runATestWithNSString:(NSString *)s {
  return OneTestComponent_runATestWithNSString_(s);
}

+ (jint)runTests {
  return OneTestComponent_runTests();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(runATestWithNSString:);
  methods[2].selector = @selector(runTests);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "oneclass", "[LIOSClass;", .constantValue.asLong = 0, 0xa, -1, 2, -1, -1 },
    { "classes", "[LIOSClass;", .constantValue.asLong = 0, 0xa, -1, 3, -1, -1 },
  };
  static const void *ptrTable[] = { "runATest", "LNSString;", &OneTestComponent_oneclass, &OneTestComponent_classes };
  static const J2ObjcClassInfo _OneTestComponent = { "OneTestComponent", NULL, ptrTable, methods, fields, 7, 0x1, 3, 2, -1, -1, -1, -1, -1 };
  return &_OneTestComponent;
}

+ (void)initialize {
  if (self == [OneTestComponent class]) {
    JreStrongAssignAndConsume(&OneTestComponent_oneclass, [IOSObjectArray newArrayWithObjects:(id[]){ ComGoogleGsonMixedStreamTest_class_() } count:1 type:IOSClass_class_()]);
    JreStrongAssignAndConsume(&OneTestComponent_classes, [IOSObjectArray newArrayWithObjects:(id[]){ ComGoogleGsonDopplJ2objcMemoryPlaygroundTest_class_(), ComGoogleGsonFunctionalArrayTest_class_(), ComGoogleGsonFunctionalCircularReferenceTest_class_(), ComGoogleGsonFunctionalCollectionTest_class_(), ComGoogleGsonFunctionalConcurrencyTest_class_(), ComGoogleGsonFunctionalCustomDeserializerTest_class_(), ComGoogleGsonFunctionalCustomSerializerTest_class_(), ComGoogleGsonFunctionalCustomTypeAdaptersTest_class_(), ComGoogleGsonFunctionalDefaultTypeAdaptersTest_class_(), ComGoogleGsonFunctionalDelegateTypeAdapterTest_class_(), ComGoogleGsonFunctionalEnumTest_class_(), ComGoogleGsonFunctionalEscapingTest_class_(), ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_class_(), ComGoogleGsonFunctionalExposeFieldsTest_class_(), ComGoogleGsonFunctionalFieldExclusionTest_class_(), ComGoogleGsonFunctionalFieldNamingTest_class_(), ComGoogleGsonFunctionalInheritanceTest_class_(), ComGoogleGsonFunctionalInstanceCreatorTest_class_(), ComGoogleGsonFunctionalInterfaceTest_class_(), ComGoogleGsonFunctionalInternationalizationTest_class_(), ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest_class_(), ComGoogleGsonFunctionalJavaUtilTest_class_(), ComGoogleGsonFunctionalJsonAdapterAnnotationOnClassesTest_class_(), ComGoogleGsonFunctionalJsonAdapterAnnotationOnFieldsTest_class_(), ComGoogleGsonFunctionalJsonFunctionalArrayTest_class_(), ComGoogleGsonFunctionalJsonFunctionalParserTest_class_(), ComGoogleGsonFunctionalJsonTreeTest_class_(), ComGoogleGsonFunctionalLeniencyTest_class_(), ComGoogleGsonFunctionalMapAsArrayTypeAdapterTest_class_(), ComGoogleGsonFunctionalMapTest_class_(), ComGoogleGsonFunctionalMoreSpecificTypeSerializationTest_class_(), ComGoogleGsonFunctionalNamingPolicyTest_class_(), ComGoogleGsonFunctionalNullObjectAndFieldTest_class_(), ComGoogleGsonFunctionalObjectTest_class_(), ComGoogleGsonFunctionalParameterizedTypesTest_class_(), ComGoogleGsonFunctionalPrettyPrintingTest_class_(), ComGoogleGsonFunctionalPrimitiveCharacterTest_class_(), ComGoogleGsonFunctionalPrimitiveTest_class_(), ComGoogleGsonFunctionalPrintFormattingTest_class_(), ComGoogleGsonFunctionalRawSerializationTest_class_(), ComGoogleGsonFunctionalReadersWritersTest_class_(), ComGoogleGsonFunctionalRuntimeTypeAdapterFactoryFunctionalTest_class_(), ComGoogleGsonFunctionalSecurityTest_class_(), ComGoogleGsonFunctionalSerializedNameTest_class_(), ComGoogleGsonFunctionalStreamingTypeAdaptersTest_class_(), ComGoogleGsonFunctionalStringTest_class_(), ComGoogleGsonFunctionalThrowableFunctionalTest_class_(), ComGoogleGsonFunctionalTreeTypeAdaptersTest_class_(), ComGoogleGsonFunctionalTypeAdapterPrecedenceTest_class_(), ComGoogleGsonFunctionalTypeHierarchyAdapterTest_class_(), ComGoogleGsonFunctionalTypeVariableTest_class_(), ComGoogleGsonFunctionalUncategorizedTest_class_(), ComGoogleGsonFunctionalVersioningTest_class_(), ComGoogleGsonInternalBindJsonElementReaderTest_class_(), ComGoogleGsonInternalBindJsonTreeWriterTest_class_(), ComGoogleGsonInternalGsonTypesTest_class_(), ComGoogleGsonInternalLazilyParsedNumberTest_class_(), ComGoogleGsonInternalLinkedHashTreeMapTest_class_(), ComGoogleGsonInternalLinkedTreeMapTest_class_(), ComGoogleGsonInternalUnsafeAllocatorInstantiationTest_class_(), ComGoogleGsonMetricsPerformanceTest_class_(), ComGoogleGsonReflectTypeTokenTest_class_(), ComGoogleGsonRegressionJsonAdapterNullSafeTest_class_(), ComGoogleGsonStreamJsonReaderPathTest_class_(), ComGoogleGsonStreamJsonReaderTest_class_(), ComGoogleGsonStreamJsonWriterTest_class_(), ComGoogleGsonCommentsTest_class_(), ComGoogleGsonDefaultDateTypeAdapterTest_class_(), ComGoogleGsonDefaultInetAddressTypeAdapterTest_class_(), ComGoogleGsonDefaultMapJsonSerializerTest_class_(), ComGoogleGsonExposeAnnotationExclusionStrategyTest_class_(), ComGoogleGsonFieldAttributesTest_class_(), ComGoogleGsonGenericArrayTypeTest_class_(), ComGoogleGsonGsonBuilderTest_class_(), ComGoogleGsonGsonTypeAdapterTest_class_(), ComGoogleGsonInnerClassExclusionStrategyTest_class_(), ComGoogleGsonJavaSerializationTest_class_(), ComGoogleGsonJsonArrayTest_class_(), ComGoogleGsonJsonNullTest_class_(), ComGoogleGsonJsonObjectTest_class_(), ComGoogleGsonJsonParserTest_class_(), ComGoogleGsonJsonPrimitiveTest_class_(), ComGoogleGsonJsonStreamParserTest_class_(), ComGoogleGsonLongSerializationPolicyTest_class_(), ComGoogleGsonMixedStreamTest_class_(), ComGoogleGsonObjectTypeAdapterTest_class_(), ComGoogleGsonOverrideCoreTypeAdaptersTest_class_(), ComGoogleGsonParameterizedTypeTest_class_(), ComGoogleGsonVersionExclusionStrategyTest_class_() } count:89 type:IOSClass_class_()]);
    J2OBJC_SET_INITIALIZED(OneTestComponent)
  }
}

@end

void OneTestComponent_init(OneTestComponent *self) {
  NSObject_init(self);
}

OneTestComponent *new_OneTestComponent_init() {
  J2OBJC_NEW_IMPL(OneTestComponent, init)
}

OneTestComponent *create_OneTestComponent_init() {
  J2OBJC_CREATE_IMPL(OneTestComponent, init)
}

jint OneTestComponent_runATestWithNSString_(NSString *s) {
  OneTestComponent_initialize();
  return CoTouchlabDopplTestingDopplJunitTestHelper_runWithNSStringArray_([IOSObjectArray arrayWithObjects:(id[]){ s } count:1 type:NSString_class_()]);
}

jint OneTestComponent_runTests() {
  OneTestComponent_initialize();
  return CoTouchlabDopplTestingDopplJunitTestHelper_runWithIOSClassArray_withOrgJunitRunnerNotificationRunListener_withCoTouchlabDopplTestingDopplJunitTestHelper_DopplJunitListener_(OneTestComponent_classes, create_OrgJunitRunnerNotificationRunListener_init(), create_OneTestComponent_1_init());
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OneTestComponent)

@implementation OneTestComponent_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OneTestComponent_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)startRunWithNSString:(NSString *)s {
}

- (void)endRunWithNSString:(NSString *)s {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(startRunWithNSString:);
  methods[2].selector = @selector(endRunWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "startRun", "LNSString;", "endRun", "LOneTestComponent;", "runTests" };
  static const J2ObjcClassInfo _OneTestComponent_1 = { "", NULL, ptrTable, methods, NULL, 7, 0x8018, 3, 0, 3, -1, 4, -1, -1 };
  return &_OneTestComponent_1;
}

@end

void OneTestComponent_1_init(OneTestComponent_1 *self) {
  NSObject_init(self);
}

OneTestComponent_1 *new_OneTestComponent_1_init() {
  J2OBJC_NEW_IMPL(OneTestComponent_1, init)
}

OneTestComponent_1 *create_OneTestComponent_1_init() {
  J2OBJC_CREATE_IMPL(OneTestComponent_1, init)
}
