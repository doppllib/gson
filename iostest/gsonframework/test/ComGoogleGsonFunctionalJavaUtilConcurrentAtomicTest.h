//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest")
#ifdef RESTRICT_ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest
#define INCLUDE_ALL_ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest 0
#else
#define INCLUDE_ALL_ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest 1
#endif
#undef RESTRICT_ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest

#if !defined (ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest_) && (INCLUDE_ALL_ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest || defined(INCLUDE_ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest))
#define ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest_

#define RESTRICT_JunitFrameworkTestCase 1
#define INCLUDE_JunitFrameworkTestCase 1
#include "junit/framework/TestCase.h"

@interface ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest : JunitFrameworkTestCase

#pragma mark Public

- (instancetype)init;

- (void)testAtomicBoolean;

- (void)testAtomicInteger;

- (void)testAtomicIntegerArray;

- (void)testAtomicLong;

- (void)testAtomicLongArray;

- (void)testAtomicLongArrayWithStringSerializationPolicy;

- (void)testAtomicLongWithStringSerializationPolicy;

#pragma mark Protected

- (void)setUp;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest)

FOUNDATION_EXPORT void ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest_init(ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest *self);

FOUNDATION_EXPORT ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest *new_ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest *create_ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest_init();

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest)

#endif

#pragma pop_macro("INCLUDE_ALL_ComGoogleGsonFunctionalJavaUtilConcurrentAtomicTest")
